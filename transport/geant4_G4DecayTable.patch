--- environments/g4py/source/particles/CMakeLists.txt
+++ environments/g4py/source/particles/CMakeLists.txt
@@ -11,6 +11,7 @@ add_library(
   pyG4ParticleTable.cc
   pyG4PrimaryParticle.cc
   pyG4PrimaryVertex.cc
+  pyG4PhaseSpaceDecayChannel.cc
   pymodG4particles.cc
 )
 
--- environments/g4py/source/particles/pyG4DecayTable.cc
+++ environments/g4py/source/particles/pyG4DecayTable.cc
@@ -31,10 +31,23 @@
 // ====================================================================
 #include <boost/python.hpp>
 #include "G4DecayTable.hh"
+#include "G4PhaseSpaceDecayChannel.hh"
 
 using namespace boost::python;
 
 // ====================================================================
+// thin wrappers
+// ====================================================================
+namespace pyG4DecayTable {
+
+void (G4DecayTable::*f2_Insert)(G4PhaseSpaceDecayChannel*)
+  = &G4DecayTable::Insert;
+void (G4DecayTable::*f1_Insert)(G4VDecayChannel*)
+  = &G4DecayTable::Insert;
+
+}
+using namespace pyG4DecayTable; 
+// ====================================================================
 // module definition
 // ====================================================================
 void export_G4DecayTable()
@@ -43,6 +56,9 @@ void export_G4DecayTable()
     ("G4DecayTable", "decay table")
      // ---
      .def("DumpInfo",   &G4DecayTable::DumpInfo)
+     .def("Insert",     f1_Insert)
+     .def("Insert",     f2_Insert)
+     .def("Entries",    &G4DecayTable::entries)
      ;
 
      // reduced functionality...
--- environments/g4py/source/particles/pyG4PhaseSpaceDecayChannel.cc
+++ environments/g4py/source/particles/pyG4PhaseSpaceDecayChannel.cc
@@ -0,0 +1,52 @@
+//
+// ********************************************************************
+// * License and Disclaimer                                           *
+// *                                                                  *
+// * The  Geant4 software  is  copyright of the Copyright Holders  of *
+// * the Geant4 Collaboration.  It is provided  under  the terms  and *
+// * conditions of the Geant4 Software License,  included in the file *
+// * LICENSE and available at  http://cern.ch/geant4/license .  These *
+// * include a list of copyright holders.                             *
+// *                                                                  *
+// * Neither the authors of this software system, nor their employing *
+// * institutes,nor the agencies providing financial support for this *
+// * work  make  any representation or  warranty, express or implied, *
+// * regarding  this  software system or assume any liability for its *
+// * use.  Please see the license in the file  LICENSE  and URL above *
+// * for the full disclaimer and the limitation of liability.         *
+// *                                                                  *
+// * This  code  implementation is the result of  the  scientific and *
+// * technical work of the GEANT4 collaboration.                      *
+// * By using,  copying,  modifying or  distributing the software (or *
+// * any work based  on the software)  you  agree  to acknowledge its *
+// * use  in  resulting  scientific  publications,  and indicate your *
+// * acceptance of all terms of the Geant4 Software license.          *
+// ********************************************************************
+//
+// $Id: pyG4PhaseSpaceDecayChannel.cc 66892 2013-01-17 10:57:59Z gunter $
+// ====================================================================
+//   pyG4PhaseSpaceDecayChannel.cc
+//
+//                                         2005 Q
+// ====================================================================
+#include <boost/python.hpp>
+#include "G4PhaseSpaceDecayChannel.hh"
+
+using namespace boost::python;
+
+// ====================================================================
+// module definition
+// ====================================================================
+void export_G4PhaseSpaceDecayChannel()
+{
+  class_<G4PhaseSpaceDecayChannel, G4PhaseSpaceDecayChannel*, boost::noncopyable>
+    ("G4PhaseSpaceDecayChannel", "phase space decay")
+     // ---
+    // constructors
+    .def(init<const G4String&, G4float, G4int, const G4String&, const G4String&,const G4String&,const G4String&>())
+    ;
+     // reduced functionality...
+     // ...
+
+}
+

--- environments/g4py/source/particles/pymodG4particles.cc
+++ environments/g4py/source/particles/pymodG4particles.cc
@@ -43,7 +43,7 @@ void export_G4DecayTable();
 void export_G4PrimaryParticle();
 void export_G4PrimaryVertex();
 void export_PyG4ParticleList();
-
+void export_G4PhaseSpaceDecayChannel();
 
 BOOST_PYTHON_MODULE(G4particles)
 {
@@ -54,5 +54,6 @@ BOOST_PYTHON_MODULE(G4particles)
   export_G4PrimaryParticle();
   export_G4PrimaryVertex();
   export_PyG4ParticleList();
+  export_G4PhaseSpaceDecayChannel();
 }
 
--- source/particles/management/include/G4DecayTable.hh
+++ source/particles/management/include/G4DecayTable.hh
@@ -46,6 +46,7 @@
 #include "globals.hh"
 #include "G4ParticleDefinition.hh"
 #include "G4VDecayChannel.hh"
+#include "G4PhaseSpaceDecayChannel.hh"
 
 class G4DecayTable 
 {
@@ -75,6 +76,7 @@ class G4DecayTable
 
  public: // With Description
     void  Insert( G4VDecayChannel* aChannel);
+    void  Insert( G4PhaseSpaceDecayChannel* aChannel){Insert(dynamic_cast<G4VDecayChannel*>(aChannel));};
     // Insert a decay channel at proper position 
     // (i.e. sorted by using branching ratio ) 

--- environments/g4py/source/processes/pymodG4processes.cc
+++ environments/g4py/source/processes/pymodG4processes.cc
@@ -45,7 +45,8 @@ void export_G4EmCalculator();
 void export_G4ProductionCutsTable();
 void export_G4VCrossSectionHandler();
 void export_G4CrossSectionHandler();
-
+void export_G4GammaConversionToMuons();
+void export_G4AnnihiToMuPair();
 BOOST_PYTHON_MODULE(G4processes)
 {
   export_G4ProcessManager();
@@ -57,4 +58,6 @@ BOOST_PYTHON_MODULE(G4processes)
   export_G4ProductionCutsTable();
   export_G4VCrossSectionHandler();
   export_G4CrossSectionHandler();
+  export_G4GammaConversionToMuons();
+  export_G4AnnihiToMuPair();
 }

--- environments/g4py/source/processes/pyG4VProcess.cc
+++ environments/g4py/source/processes/pyG4VProcess.cc
@@ -31,7 +31,8 @@
 // ====================================================================
 #include <boost/python.hpp>
 #include "G4VProcess.hh"
-
+#include "G4GammaConversionToMuons.hh"
+#include "G4AnnihiToMuPair.hh"
 using namespace boost::python;
 
 // ====================================================================
@@ -72,3 +73,25 @@ void export_G4VProcess()
     .def("GetVerboseLevel",      &G4VProcess::GetVerboseLevel)
     ;
 }
+void export_G4GammaConversionToMuons()
+{
+  class_<G4GammaConversionToMuons, G4GammaConversionToMuons*, boost::noncopyable>
+    ("G4GammaConversionToMuons", "special process", no_init)
+    // ---
+    // Note that only limited methods are exposed.
+    .def("SetCrossSecFactor",         &G4GammaConversionToMuons::SetCrossSecFactor)
+    .def("GetProcessName",       &G4VProcess::GetProcessName,
+         return_value_policy<return_by_value>())
+    ;
+}
+void export_G4AnnihiToMuPair()
+{
+  class_<G4AnnihiToMuPair, G4AnnihiToMuPair*, boost::noncopyable>
+    ("G4AnnihiToMuPair", "special process", no_init)
+    // ---
+    // Note that only limited methods are exposed.
+    .def("SetCrossSecFactor",         &G4AnnihiToMuPair::SetCrossSecFactor)
+    .def("GetProcessName",       &G4VProcess::GetProcessName,
+         return_value_policy<return_by_value>())
+    ;
+}

--- environments/g4py/source/processes/pyG4ProcessTable.cc
+++ environments/g4py/source/processes/pyG4ProcessTable.cc
@@ -32,6 +32,8 @@
 #include <boost/python.hpp>
 class G4UImessenger;
 #include "G4ProcessTable.hh"
+#include "G4AnnihiToMuPair.hh"
+#include "G4GammaConversionToMuons.hh"
 
 using namespace boost::python;
 
@@ -52,6 +54,15 @@ G4VProcess*(G4ProcessTable::*f3_FindProcess)
   (const G4String&, const G4ProcessManager*) const
   = &G4ProcessTable::FindProcess;
 
+G4AnnihiToMuPair* f4_FindProcess(G4ProcessTable* procTable, const G4String proc, const G4String part)
+{
+  return dynamic_cast<G4AnnihiToMuPair*>(procTable-> FindProcess(proc,part));
+}
+G4GammaConversionToMuons* f5_FindProcess(G4ProcessTable* procTable, const G4String proc, const G4String part)
+{
+  return dynamic_cast<G4GammaConversionToMuons*>(procTable-> FindProcess(proc,part));
+}
+
 // FindProcesses
 // raw vector pointer -> Python list conversion
 list f1_FindProcesses(G4ProcessTable* procTable)
@@ -159,7 +170,9 @@ void export_G4ProcessTable()
          return_value_policy<reference_existing_object>())
     .def("FindProcess",          f3_FindProcess,
          return_value_policy<reference_existing_object>())
-    .def("FindProcess",          f3_FindProcess,
+    .def("FindProcessA",          f4_FindProcess,
+         return_value_policy<reference_existing_object>())
+    .def("FindProcess",          f5_FindProcess,
          return_value_policy<reference_existing_object>())
     // ---
     .def("FindProcesses",        f1_FindProcesses)

